
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Default-deny all access, then allow specifically
    match /{document=**} {
      allow read, write: if false;
    }

    // Users can only read/write their own document
    match /users/{userId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }
    
    // Allow any authenticated user to read public collections
    match /announcements/{docId} {
      allow read: if request.auth != null;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    match /dailySurprises/{docId} {
      allow read: if request.auth != null;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /polls/{docId} {
        allow read: if request.auth != null;
        allow update: if request.auth != null && (
            (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['results', 'votedPolls', 'comments']))
        );
        allow create, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    match /quizzes/{docId} {
        allow read: if request.auth != null;
        allow create, delete, update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /resources/{docId} {
        allow read: if request.auth != null;
        allow create, update, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /resourceSections/{docId} {
        allow read: if request.auth != null;
        allow create, update, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    match /appConfig/{docId} {
      allow read: if request.auth != null;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperAdmin == true;
    }

    match /supportTickets/{ticketId} {
      allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      allow create: if request.auth.uid == request.resource.data.userId;
    }
    
    match /globalGifts/{giftId} {
        allow read: if request.auth != null;
        allow create, update, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperAdmin == true;
    }

    // Chat rules
    match /chats/{chatId} {
      allow read, write: if request.auth != null && request.auth.uid in resource.data.users;
    }

    match /chats/{chatId}/messages/{messageId} {
      allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      allow update, delete: if false; // Messages are immutable
    }

    match /friendRequests/{requestId} {
        allow read, create: if request.auth != null && (request.auth.uid == request.resource.data.senderId || request.auth.uid == request.resource.data.receiverId);
        allow delete: if request.auth != null && (request.auth.uid == resource.data.senderId || request.auth.uid == resource.data.receiverId);
    }
    
    // Subcollections within users
    match /users/{userId}/{collectionId}/{docId} {
       allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    match /referrals/{referralId} {
        allow create: if request.auth != null;
        allow read, update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperAdmin == true;
    }
  }
}
